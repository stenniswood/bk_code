/* 
    This class will generate OpenGL Vertex data    
	for an object with a given set of points which establish a route thru the house 
	or building.
	
	It shows as a redish/yellow line with red robot foot prints (optionally)
	along the floor.  	It draws the object as GL_LINE_STRIP.
	
	"Follow the yellow brick road!" concept.  Though red is a bolder color!
	
	This will be generated by the "maze solving" software module.
	
TO USE:
	a) Generating from the Map2D and Routing class.

ALTERNATIVELY:
	a) Create a class of glRoute. 
	b) Fill in the vertices directly.
	c) Call : create_sample()
*/

#ifndef _ROUTE_H_
#define _ROUTE_H_

#include <vector>
using namespace std;


const float RobotFeetSeparation = 12.0;		// distance between legs at hip.
const float RobotFeetLength 	= 11.0;		// distance from heel to toe.

struct stRiseRun {
	float rise;
	float run;
};

struct stFootPosition {
	float heel[3];	// x,y,z positions
	float toe[3];	// x,y,z positions	
	float angle[3];		// x,y,z angles	
};

class glRoute : public glAtom
{
public:
	glRoute( );
	void 			add_way_point( struct Vertex mStart );
	void			start_over_at( struct Vertex mStart );
	void			create_sample( );	// specific for my apartment.
	void			create_sample2();

	void 			 compute_slopes			( );
	struct stRiseRun compute_slope			( int mIndex );
	struct stRiseRun compute_perpendicular	( int mIndex );

	// this will be done in the Map2D class.
	void			compute_robot_steps		   ( float mStride, bool mLeftFootFirst = false);	
	float 			compute_robot_feet_standing( float mStride, int mIndex );
	void			generate_steps_vertices	   ( );
	bool			m_show_robot_feet;

	virtual void	generate_layer_vertices	( );
	void 			change_vertices_colors	( );	// makes robot feet in red.
	virtual void	generate_vertices		( );

	virtual void	draw_body			 	( );

	struct Vertex 	m_start;
	struct Vertex 	m_end;

	vector<struct stFootPosition>		m_left_steps;
	vector<struct stFootPosition>		m_right_steps;
	vector<struct stRiseRun>			m_slopes;		// rise/run of the path
	
	// IBO / VBO:
	int		m_number_robot_indices;	

	int		m_number_path_vertices;
	int		m_number_robot_vertices;
};

	//int		m_number_path_indices;		we do it as an array - not indexed.
#endif
